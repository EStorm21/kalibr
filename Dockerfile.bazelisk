FROM ubuntu:20.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Build tools
    git wget curl autoconf automake \
    build-essential gcc g++ cmake \
    # Java for Bazel
    openjdk-11-jdk \
    # Python and scientific computing
    python3-dev python3-pip python3-numpy python3-scipy python3-matplotlib \
    ipython3 python3-wxgtk4.0 python3-tk python3-yaml python3-pil \
    # C++ dependencies
    libeigen3-dev libboost-all-dev libsuitesparse-dev \
    libopencv-dev libtbb-dev libblas-dev liblapack-dev \
    # Additional tools
    nano vim \
    && rm -rf /var/lib/apt/lists/*

# Install Bazelisk (works on all architectures)
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "x86_64" ]; then \
        BAZELISK_ARCH="amd64"; \
    elif [ "$ARCH" = "aarch64" ]; then \
        BAZELISK_ARCH="arm64"; \
    else \
        echo "Unsupported architecture: $ARCH" && exit 1; \
    fi && \
    wget -q https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-${BAZELISK_ARCH} && \
    chmod +x bazelisk-linux-${BAZELISK_ARCH} && \
    mv bazelisk-linux-${BAZELISK_ARCH} /usr/local/bin/bazel

# Set Python 3 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1

# Create workspace
WORKDIR /kalibr

# Copy the entire repository
COPY . /kalibr/

# Create .bazelversion file to specify Bazel version
RUN echo "6.3.2" > .bazelversion

# Install Python dependencies
RUN pip3 install -r requirements_lock.txt

# Test that Bazel works by building a simple target
# Don't build everything on first pass - let user do that interactively
RUN bazel version && \
    bazel build //Schweizer-Messer/sm_common:sm_common || \
    echo "Note: Build may have failed due to missing dependencies. This is expected for initial setup."

# Set up environment
ENV KALIBR_MANUAL_FOCAL_LENGTH_INIT=1

# Default command
CMD ["/bin/bash"]